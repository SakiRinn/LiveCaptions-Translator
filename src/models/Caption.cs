using System.Windows.Automation;
using System.Text;
using System.ComponentModel;
using System.Runtime.CompilerServices;

using LiveCaptionsTranslator.controllers;

namespace LiveCaptionsTranslator.models
{
    public class Caption : INotifyPropertyChanged
    {
        private static Caption? instance = null;
        public event PropertyChangedEventHandler? PropertyChanged;

        private static readonly char[] PUNC_EOS = ".?!。？！".ToCharArray();
        private static readonly char[] PUNC_COMMA = ",，、—\n".ToCharArray();

        private string presentedCaption = "";
        private string originalCaption = "";
        private string translatedCaption = "";
        private string OriginalPrev = "";

        private readonly Queue<CaptionHistoryItem> captionHistory = new(5);

        public class CaptionHistoryItem
        {
            public string Original { get; set; }
            public string Translated { get; set; }
        }
        public IEnumerable<CaptionHistoryItem> CaptionHistory => captionHistory.Reverse();
        public static event Action? TranslationLogged;

        public bool PauseFlag { get; set; } = false;
        public bool TranslateFlag { get; set; } = false;
        public bool CaptionLogFlag { get; set; } = false;
        public bool HistoryFlag { get; set; } = false;
        public bool LogonlyFlag { get; set; } = false;

        public string PresentedCaption
        {
            get => presentedCaption;
            set
            {
                presentedCaption = value;
                OnPropertyChanged("PresentedCaption");
            }
        }
        public string OriginalCaption
        {
            get => originalCaption;
            set
            {
                originalCaption = value;
                OnPropertyChanged("OriginalCaption");
            }
        }
        public string TranslatedCaption
        {
            get => translatedCaption;
            set
            {
                translatedCaption = value;
                OnPropertyChanged("TranslatedCaption");
            }
        }

        private Caption() { }

        public static Caption GetInstance()
        {
            if (instance != null)
                return instance;
            instance = new Caption();
            return instance;
        }

        public void OnPropertyChanged([CallerMemberName] string propName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        public async void Sync()
        {
            int idleCount = 0;
            int syncCount = 0;

            while (true)
            {
                if (PauseFlag || App.Window == null)
                {
                    Thread.Sleep(1000);
                    continue;
                }

                bool HistoryCap = false;
                string fullText = GetCaptions(App.Window).Trim();
                if (string.IsNullOrEmpty(fullText))
                    continue;
                foreach (char eos in PUNC_EOS)
                    fullText = fullText.Replace($"{eos}\n", $"{eos}");

                // Get the last sentence.
                int lastEOSIndex;
                if (Array.IndexOf(PUNC_EOS, fullText[^1]) != -1)
                    lastEOSIndex = fullText[0..^1].LastIndexOfAny(PUNC_EOS);
                else
                    lastEOSIndex = fullText.LastIndexOfAny(PUNC_EOS);
                string latestCaption = fullText.Substring(lastEOSIndex + 1);

                // If the last sentence is too short, extend it by adding the previous sentence.
                while (lastEOSIndex > 0 && Encoding.UTF8.GetByteCount(latestCaption) < 10)
                {
                    lastEOSIndex = fullText[0..lastEOSIndex].LastIndexOfAny(PUNC_EOS);
                    latestCaption = fullText.Substring(lastEOSIndex + 1);

                    HistoryCap = true;
                }

                // Replace the excessive \n generated by LiveCaptions with -- to ensure coherence.
                latestCaption = latestCaption.Replace("\n", "——");

                string newPresentedCaption = latestCaption;
                // If the last sentence is too long, truncate it when displayed.
                while (Encoding.UTF8.GetByteCount(newPresentedCaption) > 150)
                {
                    int commaIndex = newPresentedCaption.IndexOfAny(PUNC_COMMA);
                    if (commaIndex < 0 || commaIndex + 1 == newPresentedCaption.Length)
                        break;
                    newPresentedCaption = newPresentedCaption.Substring(commaIndex + 1);

                    HistoryCap = true;
                }

                if (PresentedCaption.CompareTo(newPresentedCaption) != 0)
                {
                    idleCount = 0;
                    syncCount++;

                    if (HistoryCap)
                    {
                        var lastHistory = captionHistory.LastOrDefault();
                        string subOriginalHis = lastHistory?.Original.Substring(2, lastHistory.Original.Length - 4).ToLower() ?? "";
                        string subOriginalPrev = OriginalPrev.Substring(2, OriginalPrev.Length - 4).ToLower();
                        if (lastHistory == null ||
                            subOriginalHis != subOriginalPrev)
                        {
                            HistoryFlag = true;

                            var controller = new TranslationController();
                            string translated = await controller.TranslateAndLog(OriginalPrev);

                            // Add history card
                            if (CaptionLogFlag) { 
                                if (captionHistory.Count >= 5)
                                    captionHistory.Dequeue();
                                captionHistory.Enqueue(new CaptionHistoryItem
                                {
                                    Original = OriginalPrev,
                                    Translated = translated
                                });
                                OnPropertyChanged(nameof(CaptionHistory));
                            }

                            // Insert sqlite history log
                            string targetLanguage = App.Settings.TargetLanguage;
                            string apiName = App.Settings.ApiName;

                            try
                            {
                                SQLiteHistoryLogger.LogTranslation(OriginalPrev, translated, targetLanguage, apiName);
                                TranslationLogged?.Invoke();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"[Error] Logging history failed: {ex.Message}");
                            }
                        }
                    }

                    PresentedCaption = newPresentedCaption;
                    OriginalCaption = latestCaption;
                    // When EOS is included, translate only the part before EOS.
                    int EOSIndex = OriginalCaption.IndexOfAny(PUNC_EOS);
                    if (EOSIndex != -1)
                        OriginalCaption = OriginalCaption[0..(EOSIndex + 1)];

                    if (Array.IndexOf(PUNC_EOS, OriginalCaption[^1]) != -1)
                    {
                        syncCount = 0;
                        TranslateFlag = true;
                    }
                    else if (Array.IndexOf(PUNC_COMMA, OriginalCaption[^1]) != -1)
                    {
                        syncCount = 0;
                        TranslateFlag = true;
                    }

                    if (!HistoryCap)
                    {
                        OriginalPrev = OriginalCaption;
                        HistoryFlag = true;
                    }
                }
                else
                    idleCount++;

                if (syncCount > App.Settings.MaxSyncInterval ||
                    idleCount == App.Settings.MaxIdleInterval)
                {
                    syncCount = 0;
                    TranslateFlag = true;
                }
                Thread.Sleep(50);
            }
        }

        public async Task Translate()
        {
            var controller = new TranslationController();
            while (true)
            {
                for (int pauseCount = 0; PauseFlag; pauseCount++)
                {
                    if (pauseCount > 60 && App.Window != null)
                    {
                        App.Window = null;
                        LiveCaptionsHandler.KillLiveCaptions();
                    }
                    Thread.Sleep(1000);
                }
                if(LogonlyFlag)
                {
                    TranslatedCaption = await controller.Logonly(OriginalCaption, LogFlag);
                }
                else if (TranslateFlag)
                {
                    TranslatedCaption = await controller.TranslateAndLog(OriginalCaption);
                    TranslateFlag = false;

                    if (HistoryFlag)
                        Thread.Sleep(1000);
                }
                Thread.Sleep(50);
            }
        }

        public void ClearHistory()
        {
            captionHistory.Clear();
            OnPropertyChanged(nameof(CaptionHistory));
        }

        public static string GetCaptions(AutomationElement window)
        {
            var captionsTextBlock = LiveCaptionsHandler.FindElementByAId(window, "CaptionsTextBlock");
            if (captionsTextBlock == null)
                return string.Empty;
            return captionsTextBlock.Current.Name;
        }
    }
}
